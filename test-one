credit goes to the owner : https://javaconceptoftheday.com/how-hashmap-works-internally-in-java/
source : javaconceptoftheday.com

Introduction:
HashMap is a fundamental data structure in Java, widely used for storing key-value pairs. In this comprehensive guide, we will delve into the internal workings of HashMap and explore its extensions introduced in Java 8. Buckle up, as we embark on a journey through the intricacies of this essential data structure.

Understanding HashMap:
At its core, HashMap relies on an array of buckets to store key-value pairs. Each bucket is essentially a linked list that handles collisions. The process of storing and retrieving elements involves two key operations: put() for insertion and get() for retrieval.

Hashing:
The first step in understanding HashMap is hashing. When a key is supplied, the hash code is computed using the keyâ€™s hashCode() method. This hash code is then transformed to ensure a more even distribution across the array of buckets. The result is an index within the array where the key-value pair will be stored.

public class MyKey {
    // Assuming key is a simple class with appropriate equals() and hashCode() methods
}

MyKey myKey = new MyKey();
int hash = myKey.hashCode();
int index = hash & (arraySize - 1);

Collision Handling:
Collisions occur when multiple keys hash to the same index. To manage collisions, each bucket in the array is actually a linked list. New key-value pairs are added to the list at the corresponding index. Retrieval involves traversing the list to find the correct key.

class Entry<K, V> {
    K key;
    V value;
    Entry<K, V> next;
}

// Simplified HashMap implementation
class MyHashMap<K, V> {
    private Entry<K, V>[] buckets;

    // ...
}

Hash Collision Resolution:
When multiple keys end up with the same hash code and hash to the same index, a collision occurs. To handle collisions, HashMap uses a method known as chaining. In the linked list or tree structure at each index, new entries are added, forming a chain. While this ensures all key-value pairs are stored, it does introduce the challenge of efficiently searching for a specific key in the chain during retrieval.

// Handling collisions with chaining
class MyHashMap<K, V> {
    private static final int DEFAULT_CAPACITY = 16;
    private Entry<K, V>[] buckets = new Entry[DEFAULT_CAPACITY];

    public void put(K key, V value) {
        int index = hash(key) % DEFAULT_CAPACITY;
        Entry<K, V> entry = new Entry<>(key, value, null);

        if (buckets[index] == null) {
            buckets[index] = entry;
        } else {
            Entry<K, V> current = buckets[index];
            while (current.next != null) {
                current = current.next;
            }
            current.next = entry;
        }
    }

    // ...
}

Java 8 Enhancements:
Java 8 introduced several enhancements to the HashMap implementation, aiming to improve performance and reduce contention.
